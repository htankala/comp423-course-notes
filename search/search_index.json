{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Hamsini's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/rust-setup/","title":"Setting up a dev container for Rust","text":"<ul> <li>Primary author: Hamsini Tankala</li> <li>Reviewer: Arya Bharti</li> </ul>"},{"location":"tutorials/rust-setup/#rust-tutorial","title":"Rust Tutorial","text":""},{"location":"tutorials/rust-setup/#prerequisites","title":"Prerequisites","text":"<p>Before we dive in, make sure you have:</p> <ol> <li>A GitHub account: If you don\u2019t have one yet, sign up at GitHub.</li> <li>Git installed: Install Git if you don\u2019t already have it.</li> <li>Visual Studio Code (VS Code): Download and install it from here.</li> <li>Docker installed: Required to run the dev container. Get Docker here.</li> <li>Command-line basics: Your COMP211 command-line knowledge will serve you well here. If in doubt, review the Learn a CLI text! </li> </ol>"},{"location":"tutorials/rust-setup/#part-1-project-setup-creating-the-repository","title":"Part 1. Project Setup: Creating the Repository","text":""},{"location":"tutorials/rust-setup/#step-1-create-a-local-directory-and-initialize-git","title":"Step 1. Create a Local Directory and Initialize Git","text":"<p>(A) Open your terminal or command prompt.</p> <p>(B) Create a new directory for your project. (Note: Of course, if you'd like to organize this tutorial somewhere else on your machine, go ahead and change into that parent directory first. By default this will be in your user's home directory.):</p> <pre><code>mkdir rust_tutorial\ncd rust_tutorial \n</code></pre> <p>(C) Initialize a new Git repository:</p> <pre><code>git init\n</code></pre> <p>What is the effect of running the init subcommand?</p> <p>You should know what happens when you run this command at this point in the course! If you do not, please refer back to the chapter on Fundamental git Subcommands.</p> <p>(D) Create a README file:</p> <pre><code>echo \"# Rust Tutorial\" &gt; README.md\ngit add README.md\ngit commit -m \"Initial commit with README\"\n</code></pre>"},{"location":"tutorials/rust-setup/#step-2-create-a-remote-repository-on-github","title":"Step 2. Create a Remote Repository on GitHub","text":"<p>(1) Log in to your GitHub account and navigate to the Create a New Repository page.</p> <p>(2) Fill in the details as follows:</p> <ul> <li>Repository Name: rust-tutorial</li> <li>Visibility: Public</li> </ul> <p>(3) Do not initialize the repository with a README, .gitignore, or license.</p> <p>(4) Click Create Repository</p>"},{"location":"tutorials/rust-setup/#step-3-link-your-local-repository-to-github","title":"Step 3. Link your Local Repository to GitHub","text":"<p>(1) Add the GitHub repository as a remote:</p> <pre><code>git remote add origin https://github.com/&lt;your-username&gt;/rust-tutorial.git\n</code></pre> <p>Replace your-username with your GitHub username.</p> <p>(2) Check your default branch name with the subcommand git branch. If it's not main, rename it to main with the following command: git branch -M main. Old versions of git choose the name master for the primary branch, but these days main is the standard primary branch name.</p> <p>(3) Push your local commits to the GitHub repository:</p> <pre><code>git push --set-upstream origin main\n</code></pre> <p>Understanding the --set-upstream Flag</p> <ul> <li>git push --set-upstream origin main: This command pushes the main branch to the remote repository origin. The --set-upstream flag sets up the main branch to track the remote branch, meaning future pushes and pulls can be done without specifying the branch name and just writing git push origin when working on your local main branch. This long flag has a corresponding -u short flag.</li> </ul> <p>(4) Back in your web browser, refresh your GitHub repository to see that the same commit you made locally has now been pushed to remote. You can use git log locally to see the commit ID and message which should match the ID of the most recent commit on GitHub. This is the result of pushing your changes to your remote repository.</p>"},{"location":"tutorials/rust-setup/#part-2-setting-up-the-development-environment","title":"Part 2. Setting Up the Development Environment","text":""},{"location":"tutorials/rust-setup/#what-is-a-development-dev-container","title":"What is a Development (Dev) Container?","text":"<p>A dev container ensures that your development environment is consistent and works across different machines. At its core, a dev container is a preconfigured environment defined by a set of files, typically leveraging Docker to create isolated, consistent setups for development. Think of it as a \"mini computer\" inside your computer that includes everything you need to work on a specific project\u2014like the right programming language, tools, libraries, and dependencies.</p> <p>Why is this valuable? In the technology industry, teams often work on complex projects that require a specific set of tools and dependencies to function correctly. Without a dev container, each developer must manually set up their environment, leading to errors, wasted time, and inconsistencies. With a dev container, everyone works in an identical environment, reducing bugs caused by \"it works on my machine\" issues. It also simplifies onboarding new team members since they can start coding with just a few steps.</p>"},{"location":"tutorials/rust-setup/#how-are-software-dependencies-managed","title":"How are software dependencies managed?","text":"<p>To effectively manage software dependencies, it's important to understand package and dependency management. In most software projects, you rely on external libraries or packages to save time and leverage work that has already been done by others. Managing these dependencies ensures that your project has access to the correct versions of these libraries, avoiding compatibility issues.</p> <p>Lets establish your static website development environment:</p>"},{"location":"tutorials/rust-setup/#step-1-add-development-container-configuration","title":"Step 1. Add Development Container Configuration","text":"<ol> <li>In VS Code, open the rust_tutorial directory. You can do this via: File &gt; Open Folder.</li> <li>Install the Dev Containers extension for VS Code.</li> <li>Create a .devcontainer directory in the root of your project with the following file inside of this \"hidden\" configuration directory: .devcontainer/devcontainer.json</li> </ol> <pre><code>mkdir .devcontainer\ntouch .devcontainer/devcontainer.json\n</code></pre> <p>Open in VS Code using:</p> <pre><code>code .\n</code></pre> <p>The devcontainer.json file defines the configuration for your development environment. Here, we're specifying the following:</p> <ul> <li>name: A descriptive name for your dev container.</li> <li>image: The Docker image to use, in this case, the latest version of a Python environment. Microsoft maintains a collection of base images for many programming language environments, but you can also create your own!</li> <li>customizations: Adds useful configurations to VS Code, like installing the Python extension. When you search for VSCode extensions on the marketplace, you will find the string identifier of each extension in its sidebar. Adding extensions here ensures other developers on your project have them installed in their dev containers automatically.</li> <li>postCreateCommand: A command to run after the container is created. Verifies that rust is correctly installed.</li> </ul> <pre><code>{\n\u00a0\u00a0\"name\": \"Rust\",\n\u00a0\u00a0\"image\": \"mcr.microsoft.com/devcontainers/rust:1-1-bullseye\",\n\n\n\u00a0\u00a0\"customizations\": {\n\n\u00a0\u00a0\u00a0\u00a0\"vscode\": {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"settings\": {},\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"extensions\": [\"rust-lang.rust-analyzer\"]\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0}\n\n\n}\n</code></pre>"},{"location":"tutorials/rust-setup/#step-2-reopen-the-project-in-a-vscode-dev-container","title":"Step 2. Reopen the Project in a VSCode Dev Container","text":"<p>Reopen the project in the container by pressing Ctrl+Shift+P (or Cmd+Shift+P on Mac), typing \"Dev Containers: Reopen in Container,\" and selecting the option. This may take a few minutes while the image is downloaded and the requirements are installed.</p> <p>Once your dev container setup completes, close the current terminal tab (trash can), open a new terminal pane within VSCode, and try running rust --version to see your dev container is running a recent version of Rust without much effort! </p> <pre><code>rust --version\n</code></pre>"},{"location":"tutorials/rust-setup/#part-3-initialize-a-new-rust-project","title":"Part 3: Initialize a new Rust project","text":""},{"location":"tutorials/rust-setup/#step-1-inside-the-dev-container-open-a-terminal-and-run-the-following-commands","title":"Step 1: Inside the dev container, open a terminal and run the following commands:","text":"<pre><code>cargo new hello_comp423_rust --vcs none\ncd hello_comp423_rust\n</code></pre> <p>The --vcs none flag prevents cargo from automatically initializing a Git repository.</p>"},{"location":"tutorials/rust-setup/#step-2-open-the-srcmainrs-and-add-the-following-code","title":"Step 2: Open the src/main.rs and add the following code:","text":"<pre><code>fn main() {\n    println!(\"Hello COMP423\");\n}\n</code></pre>"},{"location":"tutorials/rust-setup/#part-4-compile-and-run-the-program","title":"Part 4: Compile and Run the Program","text":""},{"location":"tutorials/rust-setup/#step-1-to-compile-the-code-run-the-following-command","title":"Step 1: To compile the code, run the following command:","text":"<pre><code>cargo build\n</code></pre> <p>The cargo build command is similar to using gcc in COMP211. It only compiles the code but won't run the code.</p>"},{"location":"tutorials/rust-setup/#step-2-to-run-the-built-file-use-the-following-command-from-the-targetdebug-folder-which-will-be-present-in-the-root-project-directory","title":"Step 2: To run the built file, use the following command from the target/debug folder, which will be present in the root project directory:","text":"<pre><code>./target/debug/hello_comp423_rust\n</code></pre> <p>To compile and run the program in one step, use the following command:</p> <pre><code>cargo run\n</code></pre> <p>Cargo build is used only for building, while the cargo run command will compile the program and automatically execute it.</p>"}]}